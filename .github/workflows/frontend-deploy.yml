name: Frontend CI & Deploy

on:
  push:
    branches: [dev, main]
    paths:
      - "task-manager-front/**"
      - ".github/workflows/frontend-deploy.yml"
  pull_request:
    branches: [dev, main]
    paths:
      - "task-manager-front/**"
  workflow_dispatch:

concurrency:
  group: frontend-deploy
  cancel-in-progress: false

jobs:
  ci:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: task-manager-front/package-lock.json
      - name: npm ci + build (production)
        working-directory: task-manager-front
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npm run build -- --configuration production

  e2e-smoke:
    name: E2E smoke (Playwright)
    runs-on: ubuntu-latest
    needs: ci
    # E2E tests run only on dev branch (push) or PRs targeting dev
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'pull_request' && github.base_ref == 'dev')
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: task
          POSTGRES_PASSWORD: task
          POSTGRES_DB: taskmanager
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U task"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    steps:
      - uses: actions/checkout@v4

      # --- Backend (Java 21) ---
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Build backend (skip unit tests)
        working-directory: task-manager-back
        run: mvn -B -DskipTests package

      - name: Run backend (CI Postgres + permissive CORS)
        working-directory: task-manager-back
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/taskmanager
          SPRING_DATASOURCE_USERNAME: task
          SPRING_DATASOURCE_PASSWORD: task
          SERVER_PORT: 8080
          # CORS (Spring Boot 3.x): allow the CI frontend origin
          SPRING_WEB_CORS_ALLOWED_ORIGINS: http://localhost:4200
          SPRING_WEB_CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
          # Fallback keys (some setups still read mvc.*)
          SPRING_MVC_CORS_ALLOWED_ORIGINS: http://localhost:4200
          SPRING_MVC_CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
        run: |
          nohup java -jar target/*.jar > ../backend.log 2>&1 &
          sudo apt-get update && sudo apt-get install -y curl
          # Wait until the API is actually up (prefer actuator; fallback to /boards)
          timeout 180 bash -c '
            until curl -fsS http://localhost:8080/actuator/health | grep -q UP \
               || curl -fsS -o /dev/null http://localhost:8080/api/v1/boards; do
              sleep 2
            done
          '

      # --- Frontend + Playwright ---
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: task-manager-front/package-lock.json

      - name: Install frontend deps
        working-directory: task-manager-front
        run: npm ci

      - name: Install Playwright browsers
        working-directory: task-manager-front
        run: npx playwright install --with-deps

      - name: Build frontend (CI env -> API http://localhost:8080)
        working-directory: task-manager-front
        run: |
          if npm run | grep -q "build:ci"; then
            npm run build:ci
          else
            npx ng build --configuration ci
          fi

      - name: Serve dist and wait (localhost)
        working-directory: task-manager-front
        run: |
          npx http-server dist/task-manager-front/browser -p 4200 -a localhost >/dev/null 2>&1 &
          npx wait-on http://localhost:4200

      - name: Run smoke (@smoke)
        env:
          CI: "true"
        working-directory: task-manager-front
        run: npx playwright test --project=chromium --grep @smoke --reporter=html

      # --- Artifacts: HTML report + videos/traces ---
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: task-manager-front/playwright-report
          retention-days: 7

      - name: Upload test results (videos, traces)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: task-manager-front/test-results
          retention-days: 7

  deploy:
    # Production deploy runs only on main, without depending on E2E tests
    if: github.ref == 'refs/heads/main'
    name: Deploy frontend on self-hosted runner
    runs-on: [self-hosted, Linux, ARM64]
    needs: ci
    steps:
      - name: Run server-side deploy script
        run: /usr/local/bin/deploy_frontend.sh
