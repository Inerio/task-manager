package com.inerio.taskmanager.model;

import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Entity representing a Kanban board (multi-board support).
 * <p>
 * Each Board contains several KanbanColumns, each with multiple Tasks.
 * </p>
 */
@Entity
public class Board {

    /** Unique identifier for the board (autogenerated by DB). */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Board display name (must be unique per user in future). */
    @Column(nullable = false)
    private String name;

    /**
     * Zero-based order of this board in the sidebar.
     * <p>
     * Nullable for legacy rows; new boards are assigned the next available position.
     * </p>
     */
    @Column
    private Integer position;

    /**
     * Kanban columns contained in this board.
     * <p>
     * Cascade ALL: deleting a board deletes all its columns and their tasks.<br>
     * OrphanRemoval: keeps DB clean.<br>
     * LAZY fetch: columns are loaded only when needed.
     * </p>
     */
    @OneToMany(
        mappedBy = "board",
        cascade = CascadeType.ALL,
        orphanRemoval = true,
        fetch = FetchType.LAZY
    )
    private List<KanbanColumn> kanbanColumns = new ArrayList<>();

    /** Default constructor (required by JPA). */
    public Board() {}

    /**
     * Board constructor with name.
     * @param name Display name of the board.
     */
    public Board(String name) {
        this.name = name;
    }

    /** Gets the unique board ID. */
    public Long getId() { return id; }

    /** Gets the board name. */
    public String getName() { return name; }

    /** Sets the board name. */
    public void setName(String name) { this.name = name; }

    /** Gets the list of Kanban columns for this board. */
    public List<KanbanColumn> getKanbanColumns() { return kanbanColumns; }

    /** Sets the list of Kanban columns for this board. */
    public void setKanbanColumns(List<KanbanColumn> kanbanColumns) {
        this.kanbanColumns = kanbanColumns != null ? kanbanColumns : new ArrayList<>();
    }

    /** Adds a KanbanColumn to this board. */
    public void addKanbanColumn(KanbanColumn column) {
        if (column != null) {
            kanbanColumns.add(column);
            column.setBoard(this);
        }
    }

    /** Removes a KanbanColumn from this board. */
    public void removeKanbanColumn(KanbanColumn column) {
        if (column != null && kanbanColumns.remove(column)) {
            column.setBoard(null);
        }
    }

    /** Gets the zero-based position of this board. */
    public Integer getPosition() { return position; }

    /** Sets the zero-based position of this board. */
    public void setPosition(Integer position) { this.position = position; }
}
