package com.inerio.taskmanager.model;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.*;

/**
 * Entity representing a Task in the Kanban application.
 * <p>
 * Each task belongs to a {@link TaskList} (column), has a title, completion status,
 * order/position within the column, timestamps, and optional attachments.
 * </p>
 *
 * <ul>
 *     <li>Persisted via JPA/Hibernate</li>
 *     <li>Used as the main business entity for all task operations</li>
 * </ul>
 */
@Entity
public class Task {

    // ===========================
    //         FIELDS
    // ===========================

    /** Unique identifier for the task (autogenerated by the database). */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Task title (cannot be null). */
    @Column(nullable = false)
    private String title;

    /** Task description (optional, max 500 chars). */
    @Column(length = 500)
    private String description;

    /** Completion status of the task (true if done, false otherwise). */
    @Column(nullable = false)
    private boolean completed;

    /**
     * Order/position of this task in its column (0 = top).
     * <p>
     * Must be kept in sync for drag-and-drop reordering.
     * </p>
     */
    @Column(nullable = false)
    private int position = 0;

    /** The list/column this task belongs to (mandatory). */
    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(name = "list_id", nullable = false)
    private TaskList list;

    /** Task creation datetime (set automatically on persist, not updatable). */
    @Column(nullable = false, updatable = false)
    private LocalDateTime creationDate;

    /** Optional due date (can be null). */
    @Column
    private LocalDate dueDate;

    /** List of attachment filenames (persisted as a collection table). */
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "task_attachments", joinColumns = @JoinColumn(name = "task_id"))
    @Column(name = "filename")
    private List<String> attachments = new ArrayList<>();

    // ===========================
    //      CONSTRUCTORS
    // ===========================

    /**
     * Default constructor (required by JPA).
     */
    public Task() {}

    /**
     * Full constructor for creating a Task with essential fields.
     *
     * @param title      Task title (required)
     * @param description Task description (optional)
     * @param completed  Completion status
     * @param list       The column/list the task belongs to
     */
    public Task(String title, String description, boolean completed, TaskList list) {
        this.title = title;
        this.description = description;
        this.completed = completed;
        this.list = list;
    }

    // ===========================
    //      GETTERS & SETTERS
    // ===========================

    /** @return the task ID (autogenerated) */
    public Long getId() { return id; }

    /** @return the title of the task (never null) */
    public String getTitle() { return title; }

    /** @param title the new title (must not be null) */
    public void setTitle(String title) { this.title = title; }

    /** @return the description (nullable) */
    public String getDescription() { return description; }

    /** @param description the new description */
    public void setDescription(String description) { this.description = description; }

    /** @return true if the task is completed */
    public boolean isCompleted() { return completed; }

    /** @param completed set task as done or not */
    public void setCompleted(boolean completed) { this.completed = completed; }

    /** @return the display/order position (0 = top) */
    public int getPosition() { return position; }

    /** @param position new position/index in the column */
    public void setPosition(int position) { this.position = position; }

    /** @return the parent list/column */
    public TaskList getList() { return list; }

    /** @param list set the parent list/column */
    public void setList(TaskList list) { this.list = list; }

    /** @return the creation date (set automatically) */
    public LocalDateTime getCreationDate() { return creationDate; }

    /** @return the due date (nullable) */
    public LocalDate getDueDate() { return dueDate; }

    /** @param dueDate set the due date (nullable) */
    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }

    /**
     * Gets the attachment filenames associated with this task.
     * <p>
     * Will never return null (always a list).
     * </p>
     * @return list of filenames
     */
    public List<String> getAttachments() {
        // Defensive for legacy data
        if (attachments == null) attachments = new ArrayList<>();
        return attachments;
    }

    /** @param attachments set the list of attachment filenames */
    public void setAttachments(List<String> attachments) { this.attachments = attachments; }

    // ===========================
    //      JPA LIFECYCLE HOOKS
    // ===========================

    /**
     * Sets the creationDate before the entity is persisted (once).
     */
    @PrePersist
    protected void onCreate() {
        this.creationDate = LocalDateTime.now();
    }
}
