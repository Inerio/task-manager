package com.inerio.taskmanager.model;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.*;

/**
 * Entity representing a Task in the Kanban application.
 * <p>
 * Each task belongs to a {@link KanbanColumn} (column), has a title, completion status,
 * order/position within the column, timestamps, and optional attachments.
 * </p>
 *
 * <ul>
 *     <li>Persisted via JPA/Hibernate</li>
 *     <li>Used as the main business entity for all task operations</li>
 * </ul>
 */
@Entity
public class Task {

    // ===========================
    //         FIELDS
    // ===========================

    /** Unique identifier for the task (autogenerated by the database). */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Task title (cannot be null). */
    @Column(nullable = false, columnDefinition = "TEXT")
    private String title;

    /** Task description */
    @Column(columnDefinition = "TEXT")
    private String description;

    /** Completion status of the task (true if done, false otherwise). */
    @Column(nullable = false)
    private boolean completed;

    /**
     * Order/position of this task in its column (0 = top).
     * <p>
     * Must be kept in sync for drag-and-drop reordering.
     * </p>
     */
    @Column(nullable = false)
    private int position = 0;

    /** The column this task belongs to (mandatory). */
    @ManyToOne(fetch = FetchType.EAGER, optional = false)
    @JoinColumn(name = "kanbanColumn_id", nullable = false)
    private KanbanColumn kanbanColumn;

    /** Task creation datetime (set automatically on persist, not updatable). */
    @Column(nullable = false, updatable = false)
    private LocalDateTime creationDate;

    /** Optional due date (can be null). */
    @Column
    private LocalDate dueDate;

    /** List of attachment filenames (persisted as a collection table). */
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "task_attachments", joinColumns = @JoinColumn(name = "task_id"))
    @Column(name = "filename")
    private List<String> attachments = new ArrayList<>();

    // ===========================
    //      CONSTRUCTORS
    // ===========================

    /**
     * Default constructor (required by JPA).
     */
    public Task() {}

    /**
     * Full constructor for creating a Task with essential fields.
     *
     * @param title      Task title (required)
     * @param description Task description (optional)
     * @param completed  Completion status
     * @param kanbanColumn       The column the task belongs to
     */
    public Task(String title, String description, boolean completed, KanbanColumn kanbanColumn) {
        this.title = title;
        this.description = description;
        this.completed = completed;
        this.kanbanColumn = kanbanColumn;
    }

    // ===========================
    //      GETTERS & SETTERS
    // ===========================

    /**
     * Returns the unique ID of this task (autogenerated).
     * @return the task ID (autogenerated)
     */
    public Long getId() { return id; }

    /**
     * Returns the title of the task (never null).
     * @return the title of the task
     */
    public String getTitle() { return title; }

    /**
     * Sets the title of the task.
     * @param title the new title (must not be null)
     */
    public void setTitle(String title) { this.title = title; }

    /**
     * Returns the description of the task (nullable).
     * @return the description, or null if not set
     */
    public String getDescription() { return description; }

    /**
     * Sets the description of the task.
     * @param description the new description
     */
    public void setDescription(String description) { this.description = description; }

    /**
     * Returns whether the task is completed.
     * @return true if the task is completed, false otherwise
     */
    public boolean isCompleted() { return completed; }

    /**
     * Sets the completion status of the task.
     * @param completed set task as done or not
     */
    public void setCompleted(boolean completed) { this.completed = completed; }

    /**
     * Returns the position of the task in its column (0 = top).
     * @return the display/order position
     */
    public int getPosition() { return position; }

    /**
     * Sets the position/index of the task in its column.
     * @param position new position/index in the column
     */
    public void setPosition(int position) { this.position = position; }

    /**
     * Returns the parent column this task belongs to.
     * @return the parent KanbanColumn
     */
    public KanbanColumn getKanbanColumn() { return kanbanColumn; }

    /**
     * Sets the parent column for this task.
     * @param kanbanColumn the parent column
     */
    public void setKanbanColumn(KanbanColumn kanbanColumn) { this.kanbanColumn = kanbanColumn; }

    /**
     * Returns the creation date of the task (set automatically).
     * @return the creation date (not null)
     */
    public LocalDateTime getCreationDate() { return creationDate; }

    /**
     * Returns the due date of the task (nullable).
     * @return the due date, or null if not set
     */
    public LocalDate getDueDate() { return dueDate; }

    /**
     * Sets the due date of the task (nullable).
     * @param dueDate set the due date, or null if not set
     */
    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }

    /**
     * Gets the attachment filenames associated with this task.
     * <p>
     * Will never return null (always a list).
     * </p>
     * @return list of filenames
     */
    public List<String> getAttachments() {
        // Defensive for legacy data
        if (attachments == null) attachments = new ArrayList<>();
        return attachments;
    }

    /**
     * Sets the list of attachment filenames for this task.
     * @param attachments list of attachment filenames
     */
    public void setAttachments(List<String> attachments) { this.attachments = attachments; }

    // ===========================
    //      JPA LIFECYCLE HOOKS
    // ===========================

    /**
     * Sets the creationDate before the entity is persisted (once).
     */
    @PrePersist
    protected void onCreate() {
        this.creationDate = LocalDateTime.now();
    }
}
