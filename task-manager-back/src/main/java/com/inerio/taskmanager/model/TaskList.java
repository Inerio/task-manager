package com.inerio.taskmanager.model;

import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Entity representing a Kanban list/column (e.g. "To Do", "In Progress").
 * <p>
 * Each TaskList is a column on the board containing multiple {@link Task} entities.
 * Supports drag-and-drop reordering by its {@code position} field.
 * </p>
 *
 * <ul>
 *   <li>Persisted via JPA/Hibernate</li>
 *   <li>Manages its tasks via a one-to-many relation</li>
 * </ul>
 */
@Entity
public class TaskList {

    // ===========================
    //         FIELDS
    // ===========================

    /** Unique identifier for the list/column (autogenerated by the database). */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Display name of the column (must be unique and not null). */
    @Column(nullable = false, unique = true)
    private String name;

    /**
     * Persistent display position/index for ordering columns on the board.
     * <p>
     * Lower values appear to the left.
     * </p>
     */
    @Column(nullable = false)
    private int position;

    /**
     * Tasks contained in this column.
     * <p>
     * Cascade ALL: when a list is deleted, all its tasks are deleted too.<br>
     * OrphanRemoval: ensures DB stays clean if tasks are removed from the list.<br>
     * LAZY fetch: don't load tasks unless needed (performance).
     * </p>
     */
    @OneToMany(
        mappedBy = "list",
        cascade = CascadeType.ALL,
        orphanRemoval = true,
        fetch = FetchType.LAZY
    )
    private List<Task> tasks = new ArrayList<>();

    // ===========================
    //      CONSTRUCTORS
    // ===========================

    /** Default constructor (required by JPA). */
    public TaskList() {}

    /**
     * Full constructor for creating a TaskList with name and position.
     *
     * @param name     the unique name for the column
     * @param position index for board ordering
     */
    public TaskList(String name, int position) {
        this.name = name;
        this.position = position;
    }

    // ===========================
    //      GETTERS & SETTERS
    // ===========================

    /**
     * Gets the unique ID of the column.
     * @return the unique ID of the column
     */
    public Long getId() { return id; }

    /**
     * Gets the name of the column.
     * @return the name of the column (never null)
     */
    public String getName() { return name; }

    /**
     * Sets the name of the column.
     * @param name the new name (must be unique)
     */
    public void setName(String name) { this.name = name; }

    /**
     * Gets the persistent position of the column for drag &amp; drop ordering.
     * @return the persistent position (lower = leftmost)
     */
    public int getPosition() { return position; }

    /**
     * Sets the ordering position of the column.
     * @param position the ordering position (lower = leftmost)
     */
    public void setPosition(int position) { this.position = position; }

    /**
     * Gets the list of tasks in this column.
     * <p>
     * Will never return null (always a list, possibly empty).
     * </p>
     * @return the list of tasks in the column
     */
    public List<Task> getTasks() { return tasks; }

    /**
     * Sets the entire list of tasks for this column.
     * @param tasks the new list of tasks (never null, can be empty)
     */
    public void setTasks(List<Task> tasks) { this.tasks = tasks != null ? tasks : new ArrayList<>(); }


    // ===========================
    //      HELPERS (OPTIONAL)
    // ===========================

    /**
     * Add a task to this list and set the reverse relation.
     * <p>
     * Not strictly required, but useful for bidirectional integrity.
     * </p>
     * @param task the task to add
     */
    public void addTask(Task task) {
        if (task != null) {
            tasks.add(task);
            task.setList(this);
        }
    }

    /**
     * Remove a task from this list and clear its reference.
     * @param task the task to remove
     */
    public void removeTask(Task task) {
        if (task != null && tasks.remove(task)) {
            task.setList(null);
        }
    }
}
