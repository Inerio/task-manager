@use "../../../styles/_breakpoints" as bp;

.task-kanbanColumn {
  /* Vertical gap between tasks */
  --task-gap: 0.8rem;

  position: relative;
  display: flex;
  flex-direction: column;
  background: var(--surface-2);
  border-radius: var(--radius-3);
  box-shadow: var(--shadow-2);
  width: 100%;
  height: 100%;
  min-height: 0;
  overflow-y: auto;
  overflow-x: hidden;

  /* Subtle, brand-aligned scrollbar */
  scrollbar-width: thin; /* Firefox */
  scrollbar-color: color-mix(in oklab, var(--brand) 35%, #9fb6d44d) transparent;

  &::-webkit-scrollbar {
    width: 8px;
  }
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  &::-webkit-scrollbar-thumb {
    background: color-mix(in oklab, var(--brand) 35%, #9fb6d44d);
    border-radius: 8px;
  }

  .add-btn {
    align-self: center;
    margin: 0 0 0.7rem 0;
    padding: 0.4rem 1rem;
    width: 100%;
    font-size: 1rem;
    background: var(--surface-1);
    border: 1.5px solid var(--border-2);
    border-radius: var(--radius-1);
    cursor: pointer;
    transition: background 0.18s, border 0.18s;
    box-shadow: 0 1px 3px 0 #0001;

    /* Keep "Add task" visible while scrolling */
    position: sticky;
    top: 0;
    z-index: 5;
    background-clip: padding-box;
    border-bottom: 1px solid var(--border-1);

    &:hover {
      background: var(--surface-2);
      border-color: #b9bfcf;
    }
  }
}

/* Column-level anchor for absolute slices */
.task-dropzone-column {
  position: relative;
}

/* Head zone (spacer + top slice + optional placeholder) */
.head-zone {
  position: relative;

  .head-spacer {
    height: var(--task-gap);
  }
}

/* One row per card */
.task-row {
  position: relative;
  margin-bottom: var(--task-gap);

  app-task {
    display: block;
    margin: 0;
  }
}

/* ===== Drop slices (hit areas) ===== */
.drop-slice {
  position: absolute;
  left: 0;
  right: 0;
  pointer-events: none;
  z-index: 20;
}
.task-drag-active .drop-slice {
  pointer-events: auto;
}

/* Head slice overlays the entire head zone */
.head-slice {
  inset: 0;
  top: 0;
}

/* Slight overlap around card edges improves targeting */
.slice-before {
  top: -8px;
  height: calc(50% + 8px);
}
.slice-after {
  bottom: -8px;
  height: calc(50% + 8px);
}

/* Tail slice to catch drops past the last task */
.tail-slice {
  position: absolute;
  left: 0;
  right: 0;
  bottom: -72px;
  height: 112px;
  z-index: 30;
  pointer-events: none;
}
.task-drag-active .tail-slice {
  pointer-events: auto;
}

/* ===== Empty column ===== */
.empty-drop-wrapper {
  position: relative;
  margin: var(--task-gap) 0;
}

/* Capture dragover/drop over the empty hint */
.empty-slice {
  position: absolute;
  inset: 0;
  z-index: 20;
  pointer-events: none;
}
.task-drag-active .empty-slice {
  pointer-events: auto;
}

/* Visible empty-state hint */
.empty-column-drop {
  border: 2px dashed #e0e7ef;
  border-radius: var(--radius-2);
  min-height: 84px;
  background: #f9fbff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #b1b9d2;
  font-size: 1.01rem;

  .task-drag-active & {
    border-color: var(--brand);
    background: #e3f2fd;
    color: var(--brand);
  }
}

/* ===== Placeholder (preview) ===== */
.task-placeholder {
  --ph: 72px;
  height: 0;
  margin: 0 0 var(--task-gap) 0;
  border-radius: var(--radius-3);
  background: transparent;
  border: 0;
  box-shadow: none;
  position: relative;
  overflow: hidden;
  pointer-events: auto;
  z-index: 25;

  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: 2px dashed var(--brand, #1e88e5);
    border-radius: var(--radius-3);
    pointer-events: none;
    z-index: 3;
  }

  &::after {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      100deg,
      #0000 40%,
      color-mix(in oklab, var(--brand) 14%, #fff0) 50%,
      #0000 60%
    );
    transform: translateX(-100%);
    animation: phShimmer 900ms linear infinite;
    opacity: 0.55;
    pointer-events: none;
    z-index: 1;
  }

  &.open {
    animation: phOpen 140ms ease-out forwards;
  }

  &.open-static {
    height: var(--ph);
    animation: none;
  }

  /* Ghost preview must not capture events */
  app-task {
    pointer-events: none;
  }
}

/* Full-area hit target so the placeholder accepts drops everywhere */
.placeholder-slice {
  position: absolute;
  inset: 0;
  z-index: 40;
}

@keyframes phOpen {
  from {
    height: 0;
  }
  to {
    height: var(--ph);
  }
}

@keyframes phShimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}
