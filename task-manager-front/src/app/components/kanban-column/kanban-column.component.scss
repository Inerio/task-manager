@use "../../../styles/_breakpoints" as bp;

.task-kanbanColumn {
  position: relative;
  display: flex;
  flex-direction: column;
  background: var(--surface-2);
  border-radius: var(--radius-3);
  box-shadow: var(--shadow-2);
  min-width: var(--col-min);
  max-width: var(--col-max);
  width: 100%;
  padding: 1rem 0 0 0;

  .add-btn {
    align-self: center;
    margin: 0.7rem 0;
    padding: 0.4rem 1rem;
    font-size: 1rem;
    background: var(--surface-1);
    border: 1.5px solid var(--border-2);
    border-radius: var(--radius-1);
    cursor: pointer;
    transition: background 0.18s, border 0.18s;
    box-shadow: 0 1px 3px 0 #0001;
    width: 100%;

    &:hover {
      background: var(--surface-2);
      border-color: #b9bfcf;
    }
  }
}

/* Anchor for absolute slices at column level */
.task-dropzone-column {
  position: relative;
}

/* Head zone wraps the top slice + its placeholder */
.head-zone {
  position: relative;
}

/* Row wrapper */
.task-row {
  position: relative;
  margin-bottom: 0.8rem;

  app-task {
    display: block;
    margin: 0;
  }
}

/* ===== SLICES (invisible hit areas) ===== */
.drop-slice {
  position: absolute;
  left: 0;
  right: 0;
  pointer-events: none;
  z-index: 20;
}

.task-drag-active {
  .drop-slice {
    pointer-events: auto;
  }
}

/* Head slice overlays the whole head-zone (incl. its placeholder) */
.head-slice {
  inset: 0;
  top: 0;
}

/* Catch areas slightly overlap card edges */
.slice-before {
  top: -8px;
  height: calc(50% + 8px);
}
.slice-after {
  bottom: -8px;
  height: calc(50% + 8px);
}

/* Tail area at the end of the column */
.tail-slice {
  position: relative;
  height: 48px;
  margin-top: 0.2rem;
  pointer-events: none;
}
.task-drag-active .tail-slice {
  pointer-events: auto;
}

/* Empty column drop target */
.empty-column-drop {
  border: 2px dashed #e0e7ef;
  border-radius: var(--radius-2);
  min-height: 84px;
  background: #f9fbff;
  margin: 0.4rem 0 0.6rem 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #b1b9d2;
  font-size: 1.01rem;

  .task-drag-active & {
    border-color: var(--brand);
    background: #e3f2fd;
    color: var(--brand);
  }
}

/* ===== Placeholder (preview) =====
   Render the real card as ghost (non-interactive). */
.task-placeholder {
  --ph: 72px; /* fallback */
  height: 0;
  margin: 0 0 0.8rem 0;
  border-radius: var(--radius-3);
  background: transparent;
  border: 0;
  box-shadow: none;
  position: relative;
  overflow: hidden;
  pointer-events: none;
  z-index: 10;

  /* **Blue dashed outline** around the preview (inside the placeholder box). */
  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: 2px dashed var(--brand, #1e88e5);
    border-radius: var(--radius-3);
    pointer-events: none;
    z-index: 3;
  }

  /* Shine sweeping across the ghost */
  &::after {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      100deg,
      #0000 40%,
      color-mix(in oklab, var(--brand) 14%, #fff0) 50%,
      #0000 60%
    );
    transform: translateX(-100%);
    animation: phShimmer 900ms linear infinite;
    opacity: 0.55;
    pointer-events: none;
    z-index: 1; /* below the outline frame */
  }

  &.open {
    animation: phOpen 140ms ease-out forwards;
  }

  /* Ensure embedded card uses full height of the placeholder */
  app-task .task-card {
    margin: 0 !important;
  }
}

/* Visual of the dragged card inside the placeholder */
.task-ghost {
  position: relative;
  background: var(--surface-1);
  border-radius: var(--radius-3);
  box-shadow: var(--shadow-1);
  padding: 0.7rem 1rem 0.32rem 1rem;
  color: var(--text-1);
  pointer-events: none;

  /* Inner dashed ring on the ghost itself (fallback to ensure visibility). */
  &::before {
    content: "";
    position: absolute;
    inset: 0;
    border: 2px dashed var(--brand, #1e88e5);
    border-radius: var(--radius-3);
    pointer-events: none;
    z-index: 4;
  }

  .task-ghost-title {
    font-size: 1.08rem;
    font-weight: 700;
    margin: 0 0 0.35rem 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .task-ghost-desc {
    background: var(--surface-2);
    border-radius: var(--radius-1);
    color: #444;
    font-size: 0.99rem;
    margin: 0 0 0.5rem 0;
    padding: 0.44rem 0.7rem;
    word-break: break-word;
    overflow-wrap: anywhere;
    white-space: pre-line;
    min-height: 24px;
  }
}

@keyframes phOpen {
  from {
    height: 0;
  }
  to {
    height: var(--ph);
  }
}

@keyframes phShimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}
